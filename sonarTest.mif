-- Altera Memory Initialization File (MIF)

DEPTH = 1024;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..3FF] : 0000;  -- Default to NOP

           000 : 7FFF;  -- minDist: dw &H7fff
           001 : 0000;  -- minDistAngle: dw 0
           002 : 0000;  -- curDist: dw 0
           003 : 0000;  -- wallDistances: dw 0
           004 : 04D0;  -- 	LOAD   Zero
           005 : 4C83;  -- 	OUT    LVELCMD     ; Stop motors
           006 : 4C8B;  -- 	OUT    RVELCMD
           007 : 4CB2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           008 : 40B9;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           009 : 409B;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           00A : 4C06;  -- 	OUT    LCD         ; Display batt voltage on LCD
           00B : 4803;  -- 	IN     XIO         ; XIO contains SAFETY signal
           00C : 24DF;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           00D : 1C13;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           00E : 4802;  -- 	IN     TIMER       ; We'll use the timer value to
           00F : 24DC;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           010 : 3008;  -- 	SHIFT  8           ; Shift over to LED17
           011 : 4C07;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           012 : 140B;  -- 	JUMP   WaitForSafety
           013 : 4802;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           014 : 24DC;  -- 	AND    Mask1
           015 : 3005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           016 : 08CE;  -- 	STORE  Temp        ; (overkill, but looks nice)
           017 : 3001;  -- 	SHIFT  1
           018 : 28CE;  -- 	OR     Temp
           019 : 4C07;  -- 	OUT    XLEDS
           01A : 4803;  -- 	IN     XIO         ; XIO contains KEYs
           01B : 24DD;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           01C : 1C13;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           01D : 04D0;  -- 	LOAD   Zero
           01E : 4C07;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           01F : 04D0;  -- 	load Zero
           020 : 3401;  -- 	addi &B00000001 ; enable sonar 0
           021 : 4CB2;  -- 	out SONAREN
           022 : 04EE;  -- 	load RSlow
           023 : 4C83;  -- 	out LVELCMD
           024 : 04ED;  -- 	load FSlow
           025 : 4C8B;  -- 	out RVELCMD
           026 : 48C2;  -- 	in THETA
           027 : 379C;  -- 	addi -100	;angle to turn
           028 : 2034;  -- 	jzero EndTurn
           029 : 1C34;  -- 	jpos EndTurn
           02A : 48A8;  -- 	in DIST0
           02B : 0802;  -- 	store curDist
           02C : 1000;  -- 	sub minDist
           02D : 1C22;  -- 	jpos SpinAndPing
           02E : 2022;  -- 	jzero SpinAndPing
           02F : 0402;  -- 	load curDist
           030 : 0800;  -- 	store minDist
           031 : 48C2;  -- 	in THETA
           032 : 0801;  -- 	store minDistAngle
           033 : 1422;  -- 	jump SpinAndPing
           034 : 04D0;  -- 	load Zero
           035 : 4C83;  -- 	out LVELCMD
           036 : 4C8B;  -- 	out RVELCMD
           037 : 406F;  -- 	call TurnToAngle
           038 : 04D0;  -- 	load Zero
           039 : 3421;  -- 	addi &B00100001 ; enable sonar 0
           03A : 4CB2;  -- 	out SONAREN
           03B : 48A8;  -- 	in DIST0
           03C : 407E;  -- 	call GetDistToWall
           03D : 2803;  -- 	or wallDistances
           03E : 0803;  -- 	store wallDistances
           03F : 48AD;  -- 	in DIST5
           040 : 407E;  -- 	call GetDistToWall
           041 : 3008;  -- 	shift 8
           042 : 2803;  -- 	or wallDistances
           043 : 0803;  -- 	store wallDistances
           044 : 4CC3;  -- 	out RESETPOS
           045 : 04EE;  -- 	load RSlow
           046 : 4C8B;  -- 	out RVELCMD
           047 : 04ED;  -- 	load FSlow
           048 : 4C83;  -- 	out LVELCMD
           049 : 48C2;  -- 	in THETA
           04A : 10EB;  -- 	sub Deg270
           04B : 1C45;  -- 	jpos turning
           04C : 04D0;  -- 	load   Zero
           04D : 4C83;  -- 	out    LVELCMD
           04E : 4C8B;  -- 	out    RVELCMD
           04F : 48A8;  -- 	in DIST0
           050 : 407E;  -- 	call GetDistToWall
           051 : 300C;  -- 	shift 12
           052 : 2803;  -- 	or wallDistances
           053 : 0803;  -- 	store wallDistances
           054 : 48AD;  -- 	in DIST5
           055 : 407E;  -- 	call GetDistToWall
           056 : 3004;  -- 	shift 4
           057 : 2803;  -- 	or wallDistances
           058 : 0803;  -- 	store wallDistances
           059 : 4CC3;  -- 	out RESETPOS
           05A : 04ED;  -- 	load FSlow
           05B : 4C8B;  -- 	out RVELCMD
           05C : 04EE;  -- 	load RSlow
           05D : 4C83;  -- 	out LVELCMD
           05E : 48C2;  -- 	in THETA
           05F : 10E9;  -- 	sub Deg90
           060 : 185A;  -- 	jneg turning2
           061 : 04D0;  -- 	load   Zero
           062 : 4C83;  -- 	out    LVELCMD
           063 : 4C8B;  -- 	out    RVELCMD
           064 : 0403;  -- 	load wallDistances
           065 : 4C06;  -- 	out LCD
           066 : 04D0;  -- 	LOAD   Zero         ; Stop everything.
           067 : 4C83;  -- 	OUT    LVELCMD
           068 : 4C8B;  -- 	OUT    RVELCMD
           069 : 4CB2;  -- 	OUT    SONAREN
           06A : 046D;  -- 	LOAD   DEAD         ; An indication that we are dead
           06B : 4C01;  -- 	OUT    LEDS
           06C : 146C;  -- 	JUMP   Forever      ; Do this forever.
           06D : DEAD;  -- DEAD: DW &HDEAD
           06E : 0000;  -- angleToTurnTo: dw 0
           06F : 086E;  -- 	store angleToTurnTo
           070 : 48C2;  -- 	in THETA
           071 : 106E;  -- 	sub angleToTurnTo
           072 : 2078;  -- 	jzero TurnComplete
           073 : 04ED;  -- 	load FSlow
           074 : 4C83;  -- 	out LVELCMD
           075 : 04EE;  -- 	load RSlow
           076 : 4C8B;  -- 	out RVELCMD
           077 : 1470;  -- 	jump tta
           078 : 04D0;  -- 	load Zero
           079 : 4C83;  -- 	out LVELCMD
           07A : 4C8B;  -- 	out RVELCMD
           07B : 4400;  -- 	return
           07C : 0000;  -- Count: dw 0
           07D : 0000;  -- Value: dw 0
           07E : 087D;  -- 	store Value
           07F : 04D0;  -- 	load Zero
           080 : 087C;  -- 	store Count
           081 : 047D;  -- 	load Value
           082 : 10E7;  -- 	sub TwoFeet
           083 : 087D;  -- 	store Value
           084 : 047C;  -- 	load Count
           085 : 3401;  -- 	addi 1
           086 : 087C;  -- 	store Count
           087 : 047D;  -- 	load Value
           088 : 1C81;  -- 	jpos GetDistToWallHelper
           089 : 2081;  -- 	jzero GetDistToWallHelper
           08A : 047C;  -- 	load Count
           08B : 37FF;  -- 	addi -1
           08C : 4400;  -- 	return
           08D : 4C02;  -- 	OUT    TIMER
           08E : 4802;  -- 	IN     TIMER
           08F : 4C07;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           090 : 37F6;  -- 	ADDI   -10         ; 1 second in 10Hz.
           091 : 188E;  -- 	JNEG   Wloop
           092 : 4400;  -- 	RETURN
           093 : 089A;  -- 	STORE  WaitTime
           094 : 4C02;  -- 	OUT    Timer
           095 : 4802;  -- 	IN     Timer
           096 : 4C07;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           097 : 109A;  -- 	SUB    WaitTime
           098 : 1895;  -- 	JNEG   WACLoop
           099 : 4400;  -- 	RETURN
           09A : 0000;  -- 	WaitTime: DW 0     ; "local" variable.
           09B : 40B3;  -- 	CALL   GetBattLvl
           09C : 209B;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           09D : 10F3;  -- 	SUB    MinBatt
           09E : 18A1;  -- 	JNEG   DeadBatt
           09F : 0CF3;  -- 	ADD    MinBatt     ; get original value back
           0A0 : 4400;  -- 	RETURN
           0A1 : 04D4;  -- 	LOAD   Four
           0A2 : 4C0A;  -- 	OUT    BEEP        ; start beep sound
           0A3 : 40B3;  -- 	CALL   GetBattLvl  ; get the battery level
           0A4 : 4C04;  -- 	OUT    SSEG1       ; display it everywhere
           0A5 : 4C05;  -- 	OUT    SSEG2
           0A6 : 4C06;  -- 	OUT    LCD
           0A7 : 04D0;  -- 	LOAD   Zero
           0A8 : 37FF;  -- 	ADDI   -1          ; 0xFFFF
           0A9 : 4C01;  -- 	OUT    LEDS        ; all LEDs on
           0AA : 4C07;  -- 	OUT    XLEDS
           0AB : 408D;  -- 	CALL   Wait1       ; 1 second
           0AC : 04D0;  -- 	Load   Zero
           0AD : 4C0A;  -- 	OUT    BEEP        ; stop beeping
           0AE : 04D0;  -- 	LOAD   Zero
           0AF : 4C01;  -- 	OUT    LEDS        ; LEDs off
           0B0 : 4C07;  -- 	OUT    XLEDS
           0B1 : 408D;  -- 	CALL   Wait1       ; 1 second
           0B2 : 14A1;  -- 	JUMP   DeadBatt    ; repeat forever
           0B3 : 04F5;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           0B4 : 4C90;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           0B5 : 4C92;  -- 	OUT    I2C_RDY     ; start the communication
           0B6 : 40C0;  -- 	CALL   BlockI2C    ; wait for it to finish
           0B7 : 4891;  -- 	IN     I2C_DATA    ; get the returned data
           0B8 : 4400;  -- 	RETURN
           0B9 : 40C0;  -- 	CALL   BlockI2C    ; wait for idle
           0BA : 04F4;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           0BB : 4C90;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           0BC : 04D0;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           0BD : 4C91;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           0BE : 4C92;  -- 	OUT    I2C_RDY     ; start the communication
           0BF : 40C0;  -- 	CALL   BlockI2C    ; wait for it to finish
           0C0 : 04D0;  -- 	LOAD   Zero
           0C1 : 08CE;  -- 	STORE  Temp        ; Used to check for timeout
           0C2 : 04CE;  -- 	LOAD   Temp
           0C3 : 3401;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           0C4 : 08CE;  -- 	STORE  Temp
           0C5 : 20C9;  -- 	JZERO  I2CError    ; Timeout occurred; error
           0C6 : 4892;  -- 	IN     I2C_RDY     ; Read busy signal
           0C7 : 1CC2;  -- 	JPOS   BI2CL       ; If not 0, try again
           0C8 : 4400;  -- 	RETURN             ; Else return
           0C9 : 04D0;  -- 	LOAD   Zero
           0CA : 352C;  -- 	ADDI   &H12C       ; "I2C"
           0CB : 4C04;  -- 	OUT    SSEG1
           0CC : 4C05;  -- 	OUT    SSEG2       ; display error message
           0CD : 14C9;  -- 	JUMP   I2CError
           0CE : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be useful
           0CF : FFFF;  -- NegOne:   DW -1
           0D0 : 0000;  -- Zero:     DW 0
           0D1 : 0001;  -- One:      DW 1
           0D2 : 0002;  -- Two:      DW 2
           0D3 : 0003;  -- Three:    DW 3
           0D4 : 0004;  -- Four:     DW 4
           0D5 : 0005;  -- Five:     DW 5
           0D6 : 0006;  -- Six:      DW 6
           0D7 : 0007;  -- Seven:    DW 7
           0D8 : 0008;  -- Eight:    DW 8
           0D9 : 0009;  -- Nine:     DW 9
           0DA : 000A;  -- Ten:      DW 10
           0DB : 0001;  -- Mask0:    DW &B00000001
           0DC : 0002;  -- Mask1:    DW &B00000010
           0DD : 0004;  -- Mask2:    DW &B00000100
           0DE : 0008;  -- Mask3:    DW &B00001000
           0DF : 0010;  -- Mask4:    DW &B00010000
           0E0 : 0020;  -- Mask5:    DW &B00100000
           0E1 : 0040;  -- Mask6:    DW &B01000000
           0E2 : 0080;  -- Mask7:    DW &B10000000
           0E3 : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           0E4 : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           0E5 : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.05mm units
           0E6 : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.05mm units
           0E7 : 024A;  -- TwoFeet:  DW 586       ; ~2ft in 1.05mm units
           0E8 : 06DE;  -- SixFeet: DW 1758
           0E9 : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometry units
           0EA : 00B4;  -- Deg180:   DW 180       ; 180
           0EB : 010E;  -- Deg270:   DW 270       ; 270
           0EC : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           0ED : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           0EE : FF9C;  -- RSlow:    DW -100
           0EF : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           0F0 : FEA2;  -- RMid:     DW -350
           0F1 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           0F2 : FE0C;  -- RFast:    DW -500
           0F3 : 0082;  -- MinBatt:  DW 130       ; 13.0V - minimum safe battery voltage
           0F4 : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           0F5 : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
  END;
